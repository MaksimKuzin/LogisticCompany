@model LogisticCompany.Models.Recepient

@{
    // Установка заголовка в зависимости от того, является ли модель пустой или нет
    ViewData["Title"] = Model != null && Model.Id != 0 ? "Изменение получателя" : "Добавление получателя";
}
<h2 class="text-center mb-4">@ViewData["Title"]</h2>

<div class="container">
    <form asp-action="@(Model != null && Model.Id != 0 ? "Edit" : "Create")" method="post" class="needs-validation" novalidate>
        <input type="hidden" asp-for="Id" />

        <div class="row mb-3">
            <label asp-for="FIO" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <input asp-for="FIO" class="form-control" />
                <span asp-validation-for="FIO" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <label asp-for="BirthYear" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <input asp-for="BirthYear" class="form-control" />
                <span asp-validation-for="BirthYear" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <label asp-for="PostalCode" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <input asp-for="PostalCode" class="form-control" />
                <span asp-validation-for="PostalCode" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <label asp-for="DeliveryAddress" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <input asp-for="DeliveryAddress" class="form-control" />
                <span asp-validation-for="DeliveryAddress" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <label asp-for="Phone" class="col-sm-2 col-form-label"></label>
            <div class="col-sm-10">
                <input asp-for="Phone" class="form-control" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-10 offset-sm-2">
                <button type="submit" class="btn btn-primary">Сохранить</button>
                <a asp-action="Index" class="btn btn-secondary ms-2">Отмена</a>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");

            form.addEventListener("submit", function (event) {
                let isValid = true;

                // Проверка ФИО (должно быть 3 слова)
                const fio = document.querySelector("input[name='FIO']").value.trim();
                if (fio.split(" ").length !== 3) {
                    isValid = false;
                    alert("Поле ФИО должно содержать три слова.");
                }

                // Проверка года рождения (не меньше 1901)
                const birthYear = parseInt(document.querySelector("input[name='BirthYear']").value.trim(), 10);
                if (isNaN(birthYear) || birthYear < 1901) {
                    isValid = false;
                    alert("Год рождения должен быть не меньше 1901.");
                }

                // Проверка почтового кода (должно быть 6 цифр)
                const postalCode = document.querySelector("input[name='PostalCode']").value.trim();
                if (!/^\d{6}$/.test(postalCode)) {
                    isValid = false;
                    alert("Почтовый код должен состоять из 6 цифр.");
                }

                // Проверка телефона (должно быть 12 символов)
                const phone = document.querySelector("input[name='Phone']").value.trim();
                if (phone.length !== 12) {
                    isValid = false;
                    alert("Поле Телефон должно содержать 12 символов.");
                }

                if (!isValid) {
                    event.preventDefault(); // Остановка отправки формы, если найдена ошибка
                }
            });
        });
    </script>